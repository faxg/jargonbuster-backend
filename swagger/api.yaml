#
# For a free graphical editor, try https://mermade.github.io/openapi-gui/#
#
openapi: 3.0.0
servers:
  - url: 'http://jargonbusterbackend.azurewebsites.net/api'
info:
  description: >-
    API for the JargonBuster challenge. Provides a set of APIs to use text
    summarization, medical text analytics and access to other cognitive
    services. 
  version: 1.0.0
  title: JargonBuster API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: Jargonbuster Backend
    url: 'https://github.com/faxg/jargonbuster-backend'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
tags:
  - name: Extract
    description: 'API to extract text from documents (like PDF, images)'
  - name: Summarize
    description: 'Summarize text using LSA (Latent Semantic Analysis). '
  - name: Analyze
    description: >-
      Cognitive analytics on medical texts. Extracts concepts, entities, key phrases etc...
  - name: Present
    description: >-
      Presentation related functions, e.g. find illustrations, configure Azure
      Immersive Reader 

#
#
#
paths:

  #  
  # Create summaries from text
  #
  /summarize:
    post:
      summary: Summarizes a text
      description: >-
        Summarize text up to 1MB.
      parameters:
        - name: language
          in: query
          required: false
          schema:
            type: string
          description: Specifies the language of the text (default is english)
      operationId: app.post_summary
      responses:
        '200':
          description: 'Summarization successful '
          content:
            application/json:
              schema: {}
      tags:
        - Summarize
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SummaryRequest'
        description: SummaryRequest containing the text to summarize.

  #
  # Extract text from documents
  # 
  /extract:
    summary: Extracts text from documents
    description: 'Upload a document (PDF, for now) and extract the text from it.'
    post:
      tags:
        - Extract
      operationId: app.post_extract
      requestBody:
        content:
          'multipart/form-data':
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        description: Extract text from a document (PDF for now)
      responses:
        '200':
          description: File uploaded.
        '400':
          description: Error during file upload.


  # Endpoints for analysis of plain text.
  /analyze:
    post:
      summary: Analyzes medical texts
      description: Response with detailed analytics of the uploaded text
      parameters: []
      operationId: app.post_analyze
      responses:
        '200':
          description: Text extraction successfull
          content:
            application/json:
              schema: {}
      tags:
        - Analyze
      requestBody:
        required: true
        content:
          application/json:
            schema: {}
        description: 'Text to analyze. '
    summary: Analyze medical jargon text
    description: >-
      This uses Azure Text Analytics for Health to find concepts, terms etc. in
      medical literature


# API for getting token etc. for  integration of presentation layer / the frontend
  /getIRToken:
    get:
      summary: Gets a reader token for Azure Immersive Reader
      description: >-
        Clients need to request a valid token for embedding the Immersive Reader
        component. Use this to request one.
      parameters: []
      operationId: app.get_ir_token
      responses:
        '200':
          description: IR reader token acquired
          content:
            application/json:
              schema: {}
      tags:
        - Present
    summary: Presentation helpers
    description: >-
      Helper methods to support the frontend with presenting content in a web /
      mobile user interface.
components:
  schemas:
    SummaryRequest:
      type: object
      properties:
        text:
          type: string
    ExtractRequest:
      type: object
    AnalysisRequest:
      type: object
      properties:
        text:
          type: string
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
  links: {}
  callbacks: {}
security: []